benchmarkPrint(title: "BInt tests")
{
	testBInt()
}

//benchmarkPrint(title: "test")
//{
//	printFact2(20000)
//	//printfac(20000)
//}

benchmarkPrint(title: "fact with digits")
{
	let a = factbd(2000)

}



let fff2 = fact(1000)
benchmarkPrint(title: "Get 1000! as String")
{
	// Get 300! (615 decimal digits) as String Debug Mode
	// 30.01.16: 2635ms
	// 01.02.16: 3723ms
	// 04.02.16: 2492m
	// 06.02.16: 2326ms
	// 07.02.16: 53ms

	// Get 1000! (2568 decimal digits) as String Debug Mode
	// 07.02.16: 2386ms
	// 10.02.16: 343ms


	let str = fff2.description
}

benchmarkPrint(title: "Mersenne to exp 196 only prime")
	{
		// Mersenne to exp 150 only prime Debug Mode
		// 27.01.16: 2384ms
		// 30.01.16: 1874ms
		// 01.02.16: 1750ms
		// 04.02.16: 1070ms
		// 06.02.16: 943ms

		// Mersenne to exp 196 only prime Debug Mode
		// 06.02.16: 2601ms
		// 10.02.16: 2427ms

		let a = getMersennes(196)
		print(a)
}

benchmarkPrint(title: "Mersenne to exp 128")
	{
		// Mersenne to exp 100 Debug Mode
		// 27.01.16: 2559ms
		// 30.01.16: 2092ms
		// 04.02.16: 1330ms
		// 06.02.16: 1143ms

		// Mersenne to exp 128 Debug Mode
		// 06.02.16: 2853ms
		// 10.02.16: 2804ms

		var isM = false
		for i in 1...128
		{
			isM = isMersenne(i)
			if isM { print(i, terminator: ",") }
		}
}

var fkt2000 = BInt(0)
benchmarkPrint(title: "Fkt of 4000")
{
	// Fkt 1000  Debug Mode
	// 27.01.16: 2548ms
	// 30.01.16: 1707ms
	// 01.02.16: 398ms

	// Fkt 2000  Debug Mode
	// 01.02.16: 2452ms
	// 04.02.16: 2708ms
	// 06.02.16: 328ms

	// Fkt 4000  Debug Mode
	// 06.02.16: 2669ms
	// 10.02.16: 594ms

	fkt2000 = fact(4000)
}

benchmarkPrint(title: "10^14000")
{
	// 10^14000 Debug Mode
	// 06.02.16: 2668ms
	// 10.02.16: 392ms

	let a = BInt(10) ^ 14000
}

benchmarkPrint(title: "Fib 100.000")
	{
		// Fib 35.000 Debug Mode
		// 27.01.16: 2488ms
		// 30.01.16: 1458ms
		// 01.02.16: 357ms

		// Fib 100.000 Debug Mode
		// 01.02.16: 2733ms
		// 04.02.16: 2949ms
		// 10.02.16: 1978ms

		let a = fib(100_000)
}



benchmarkPrint(title: "Perm and Comb")
	{
		// Perm and Comb (2000, 1000) Debug Mode
		// 04.02.16: 2561ms
		// 06.02.16: 2098ms
		// 07.02.16: 1083ms
		// 10.02.16: 350ms

		let a = permutations(2000, 1000)
		let b = combinations(2000, 1000)
}


benchmarkPrint(title: "BDouble converging to 2")
{
	// BDouble converging to 2 Debug Mode
	// 06.02.16: 3351ms

	var res = BDouble(0)
	var den = BInt(1)

	for i in 0..<1000
	{
		res = res + BDouble(BInt(1), over: den)
		den = den * BInt(2)
	}
}


var fromStr = BInt(0)
let asStr = "22615587100656579734458234565438117408732218297561527121218136184100830102841721681848794779541542377464781513157436504023358464871469917323788231124193141909103586542429194425391866835785063893985645344398654421968691962137850742060153547949186632314428321921773151661225348749645407436597319970409840191849588097226238918443800714877963735839845543458021077668986439881938273962162852852799850781985201974226283511741886912191386972901038992117373837125749984292541570734040566634241899366935694213559180837062619507149175420173788494097243774980486415125761627826299783975579217589587216092122558349945734777910540398675132243586641537993560166246342998035617202573314220620782250282189578905624489654538642945569116423513376929160236133222190779607280867769231573879036279181501311037181083501841499308003368117507197766783128626238580257935009220072708981954324938404851874143370565137578947776473276457119016600785375803504952413965137862183398627011487785267742096043324658672215396970658841979048969441875035139272503473498453023087874866057887781815819388790052986377310495778496420417288290147695877190572127989898353471731670876276204031517027885439458924287252807044402678622111455914528490730087513177013948921646248578307718768492066922175009031090127218812763060080803705977402685176065263450205331329554065817320938408757296294194231746766569143909206465612317940981088405307956920144948448394629096320117715229916794569119205019637177425746685184718736659683498956410894897208197704085123775138172353283514585619841967024527752348431646675710287915905008539317820517558096998051292089259947950646524648862669255319762046082750207677648642961505263217968663358770982621826190290693771928486299277652031912940607481092093183851006311894810944225290563910713866300805013137213399453378074588173511269863834263391749772801570992017229391308472020049241540941630636516831806688528950904172419346311163688610277534963325483987890229430357215522835768092171620068074912353906078942087456428989806288734282965238491805726569194509627808421910465907832287301805829824228426988772565483673831668687260218162151581532320586741855486433978473518454783185103982755438182187741198295681337823108941478565250233958666861263081583900981754658251382509328978370715944164815626633563744649317794504360308210846081855472242463487770389195580175901229593424027399913896028712029414914225750457273450843180213683730143816937437595188703621981176457476451803928697911349735419307179373652531445201113334133581580805628309121662015193408044201342141140182697078653067541637508731891460761384528195366269532893982537501282964133941066175871545460866968513355694988800856171989407845381047255252704775845643077606043331744096958870259242785686159360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

benchmarkPrint(title: "BInt from String, 3026 digits (1151!)")
{
	// BInt from String, 7344 digits (1151!) Debug Mod
	// 07.02.16: 2780ms
	// 10.02.16: 1135ms
	fromStr = BInt(asStr)
}

assert(asStr == fromStr.description)
